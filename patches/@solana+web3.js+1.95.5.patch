diff --git a/node_modules/@solana/web3.js/lib/bigint-buffer-polyfill.js b/node_modules/@solana/web3.js/lib/bigint-buffer-polyfill.js
new file mode 100644
index 0000000..1992c29
--- /dev/null
+++ b/node_modules/@solana/web3.js/lib/bigint-buffer-polyfill.js
@@ -0,0 +1,35 @@
+export function toBigIntLE(buffer) {
+    let result = 0n;
+    for (let i = buffer.length - 1; i >= 0; i--) {
+        result = (result << 8n) | BigInt(buffer[i]);
+    }
+    return result;
+}
+
+export function toBigIntBE(buffer) {
+    let result = 0n;
+    for (let i = 0; i < buffer.length; i++) {
+        result = (result << 8n) | BigInt(buffer[i]);
+    }
+    return result;
+}
+
+export function toBufferLE(bigint, width) {
+    const buffer = new Uint8Array(width);
+    let temp = bigint;
+    for (let i = 0; i < width; i++) {
+        buffer[i] = Number(temp & 0xffn);
+        temp >>= 8n;
+    }
+    return Buffer.from(buffer);
+}
+
+export function toBufferBE(bigint, width) {
+    const buffer = new Uint8Array(width);
+    let temp = bigint;
+    for (let i = width - 1; i >= 0; i--) {
+        buffer[i] = Number(temp & 0xffn);
+        temp >>= 8n;
+    }
+    return Buffer.from(buffer);
+}
diff --git a/node_modules/@solana/web3.js/lib/index.browser.esm.js b/node_modules/@solana/web3.js/lib/index.browser.esm.js
index d40b934..72fbc2c 100644
--- a/node_modules/@solana/web3.js/lib/index.browser.esm.js
+++ b/node_modules/@solana/web3.js/lib/index.browser.esm.js
@@ -3,10 +3,34 @@ import { ed25519 } from '@noble/curves/ed25519';
 import BN from 'bn.js';
 import bs58 from 'bs58';
 import { sha256 } from '@noble/hashes/sha256';
-import { serialize, deserialize, deserializeUnchecked } from 'borsh';
+import * as borsh from 'borsh';
+const { serialize, deserialize, deserializeUnchecked } = borsh;
 import * as BufferLayout from '@solana/buffer-layout';
 import { blob } from '@solana/buffer-layout';
-import { toBigIntLE, toBufferLE } from 'bigint-buffer';
+// import * as BigIntBuffer from 'bigint-buffer';
+
+// Fallback implementation of toBigIntLE
+const toBigIntLE = function (buffer) {
+  let result = 0n;
+  for (let i = buffer.length - 1; i >= 0; i--) {
+    result = (result << 8n) | BigInt(buffer[i]);
+  }
+  return result;
+};
+
+// Fallback implementation of toBufferLE
+const toBufferLE = function (bigint, width) {
+  const buffer = new Uint8Array(width);
+  let temp = bigint;
+  for (let i = 0; i < width; i++) {
+    buffer[i] = Number(temp & 0xffn); // Extract the least significant byte
+    temp >>= 8n; // Shift right by 8 bits
+  }
+  return Buffer.from(buffer);
+};
+
+export { toBigIntLE, toBufferLE };
+
 import { coerce, instance, string, tuple, literal, unknown, type, number, array, nullable, optional, boolean, record, union, create, any, assert as assert$1 } from 'superstruct';
 import RpcClient from 'jayson/lib/client/browser';
 import { CommonClient, WebSocket } from 'rpc-websockets';
